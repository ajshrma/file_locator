#!/usr/bin/env node

/**
 * Module dependencies.
 */

var https = require('https');
var http = require('http');

var debug = require('debug')('confusionserver:server');
var app = require('../app');

/**
 * Normalize a port into a number, string, or false.
 */

function portVerification(inputPort) {
	var port = +inputPort;

	if (isNaN(port)) {
		return inputPort;
	}

	if (port >= 0) {
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind =
		typeof serverPort === 'string'
			? 'Pipe ' + serverPort
			: 'Port ' + serverPort;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}

/**
 * Get port from environment and store in Express.
 */

const serverPort = portVerification(process.env.PORT || 3009);
app.set('secPort', serverPort + 443);
app.set('port', serverPort);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(serverPort);
server.on('error', onError);
server.on('listening', onListening);

var secureServer = https.createServer({}, app);

secureServer.listen(app.get('secPort'), () => {
	console.log('server running on port ', app.get('secPort'));
});

secureServer.on('listening', onListening);
secureServer.on('error', onError);
